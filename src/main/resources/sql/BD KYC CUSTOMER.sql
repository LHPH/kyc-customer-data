DROP TABLE IF EXISTS CUSTOMER;
DROP TABLE IF EXISTS CUSTOMER_ADDRESS;
DROP FUNCTION IF EXISTS GET_ID_CUSTOMER;
DROP PROCEDURE IF EXISTS PROCESS_CUSTOMER;

CREATE TABLE CUSTOMER(
    ID SERIAL,
    FIRST_NAME VARCHAR(50) NOT NULL,
    SECOND_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50) NOT NULL,
    SECOND_LAST_NAME VARCHAR(50),
    RFC VARCHAR(13),
    AGE VARCHAR(2),
    HOME_PHONE VARCHAR(10),
    CELL_PHONE VARCHAR(10) NOT NULL,
    EMAIL VARCHAR(50) NOT NULL,
    ACTIVE BOOLEAN,
    DATE_CREATED DATE NOT NULL,
    DATE_MODIFIED DATE
);

CREATE TABLE CUSTOMER_ADDRESS(
    ID_CUSTOMER INTEGER,
    STREET VARCHAR(20) NOT NULL,
    STREET_NUMBER VARCHAR(5),
    NEIGHBOURHOOD VARCHAR(20) NOT NULL,
    ID_STATE INTEGER NOT NULL,
    DATE_CREATED DATE NOT NULL,
    DATE_MODIFIED DATE
);

ALTER TABLE CUSTOMER ADD PRIMARY KEY (ID);
ALTER TABLE CUSTOMER_ADDRESS ADD CONSTRAINT FK_ID_CUSTOMER
FOREIGN KEY (ID_CUSTOMER) REFERENCES CUSTOMER(ID) ON DELETE CASCADE;
ALTER TABLE CUSTOMER_ADDRESS ADD CONSTRAINT FK_ID_STATE
FOREIGN KEY (ID_STATE) REFERENCES STATES_COUNTRY(ID) ON DELETE CASCADE;

CREATE OR REPLACE FUNCTION GET_ID_CUSTOMER(
P_FIRST_NAME VARCHAR,
P_SECOND_NAME VARCHAR,
P_LAST_NAME VARCHAR,
P_SECOND_LAST_NAME VARCHAR,
P_RFC VARCHAR
)
RETURNS int
LANGUAGE plpgsql
AS $$
DECLARE
    ID_CUSTOMER integer;
BEGIN

    SELECT ID INTO ID_CUSTOMER FROM CUSTOMER
    WHERE FIRST_NAME = P_FIRST_NAME
    AND COALESCE(SECOND_NAME,'') = COALESCE(NULL,'')
    AND LAST_NAME = P_LAST_NAME
    AND SECOND_LAST_NAME = P_SECOND_LAST_NAME
    AND RFC LIKE ('%' || P_RFC || '%');

    IF NOT found THEN
        ID_CUSTOMER = 0;
    END IF;
    return ID_CUSTOMER;

END; $$



CREATE OR REPLACE PROCEDURE PROCESS_CUSTOMER(
OPERATION INTEGER,
P_ID_CUSTOMER INTEGER,
P_FIRST_NAME VARCHAR,
P_SECOND_NAME VARCHAR,
P_LAST_NAME VARCHAR,
P_SECOND_LAST_NAME VARCHAR,
P_RFC VARCHAR,
P_AGE VARCHAR,
P_HOME_PHONE VARCHAR,
P_CELL_PHONE VARCHAR,
P_EMAIL VARCHAR,
P_ACTIVE BOOLEAN,
P_STREET VARCHAR,
P_STREET_NUMBER VARCHAR,
P_NEIGHBOURHOOD VARCHAR,
P_ID_STATE INTEGER
)
LANGUAGE plpgsql
AS $$
DECLARE
    ID_CUSTOMER integer;
    NEW_ID_CUSTOMER integer;
    V_FIRST_NAME varchar;
    V_SECOND_NAME varchar;
    V_LAST_NAME varchar;
    V_SECOND_LAST_NAME varchar;
    V_RFC varchar;
    V_AGE varchar;
    V_HOME_PHONE varchar;
    V_CELL_PHONE varchar;
    V_EMAIL varchar;
    V_ACTIVE boolean;
    V_STREET varchar;
    V_STREET_NUMBER varchar;
    V_NEIGHBOURHOOD varchar;
    V_ID_STATE varchar;
    V_UPDATE_CUSTOMER text;
    V_UPDATE_CUSTOMER_ADDRESS text;

BEGIN

    IF OPERATION IS NULL THEN

        RAISE EXCEPTION 'IT MUST SPECIFIC A OPERATION VALUE INSERT(0), UPDATE(1), LOGICAL DELETE(2), PHYSICAL DELETE(3)';

    ELSEIF (OPERATION = 0) THEN

        SELECT GET_ID_CUSTOMER(P_FIRST_NAME,P_SECOND_NAME,P_LAST_NAME,P_SECOND_LAST_NAME,P_RFC) INTO ID_CUSTOMER;

    ELSE
        ID_CUSTOMER = P_ID_CUSTOMER;
    END IF;

    IF OPERATION = 0 AND ID_CUSTOMER <> 0 THEN

        RAISE EXCEPTION 'CANNOT CREATE NEW CUSTOMER WITH THIS INFO BECAUSE ALREADY EXISTS A CUSTOMER WITH THIS INFO AND ID=%',ID_CUSTOMER;

    END IF;

    IF (OPERATION = 2 OR OPERATION = 3)  AND
        NOT EXISTS(SELECT ID_CUSTOMER FROM CUSTOMER WHERE ID_CUSTOMER=P_ID_CUSTOMER) THEN

        RAISE EXCEPTION 'CANNOT EXECUTE THIS OPERATION BECAUSE THE CUSTOMER DOES NOT EXISTS';

    END IF;

    IF OPERATION = 1 and ID_CUSTOMER = 0 THEN
        OPERATION = 0;
    END IF;

    IF OPERATION = 0 THEN

        INSERT INTO CUSTOMER (FIRST_NAME,SECOND_NAME,LAST_NAME,SECOND_LAST_NAME,RFC,AGE,HOME_PHONE,CELL_PHONE,EMAIL,ACTIVE,DATE_CREATED,DATE_MODIFIED)
            VALUES(P_FIRST_NAME,P_SECOND_NAME,P_LAST_NAME,P_SECOND_LAST_NAME,
            P_RFC,P_AGE,P_HOME_PHONE,P_CELL_PHONE,P_EMAIL,P_ACTIVE,CURRENT_DATE,NULL);
        SELECT MAX(ID) INTO NEW_ID_CUSTOMER FROM CUSTOMER WHERE RFC = P_RFC;
        INSERT INTO CUSTOMER_ADDRESS VALUES(NEW_ID_CUSTOMER,P_STREET,P_STREET_NUMBER,P_NEIGHBOURHOOD,P_ID_STATE,CURRENT_DATE,NULL);
        COMMIT;

    ELSIF OPERATION = 1 THEN

        SELECT C.FIRST_NAME,C.SECOND_NAME,C.LAST_NAME,C.SECOND_LAST_NAME,C.RFC,C.AGE,EMAIL,C.HOME_PHONE,C.CELL_PHONE,C.ACTIVE,
        A.STREET,A.STREET_NUMBER,A.NEIGHBOURHOOD,A.ID_STATE
        INTO V_FIRST_NAME,V_SECOND_NAME,V_LAST_NAME,V_SECOND_LAST_NAME,V_RFC,V_AGE,V_EMAIL,V_HOME_PHONE,V_CELL_PHONE,V_ACTIVE,
        V_STREET,V_STREET_NUMBER,V_NEIGHBOURHOOD,V_ID_STATE
        FROM CUSTOMER C INNER JOIN CUSTOMER_ADDRESS A ON C.ID = A.ID_CUSTOMER
        WHERE C.ID = ID_CUSTOMER;

        V_UPDATE_CUSTOMER = 'UPDATE CUSTOMER SET FIRST_NAME=$1,SECOND_NAME=$2, LAST_NAME=$3,SECOND_LAST_NAME=$4,RFC=$5,AGE=$6';
        V_UPDATE_CUSTOMER = V_UPDATE_CUSTOMER||',CELL_PHONE=$7,HOME_PHONE=$8,EMAIL=$9,ACTIVE=$10,DATE_MODIFIED=CURRENT_DATE WHERE ID=$11';
        V_UPDATE_CUSTOMER_ADDRESS = 'UPDATE CUSTOMER_ADDRESS SET STREET=$1,STREET_NUMBER=$2,NEIGHBOURHOOD=$3';
        V_UPDATE_CUSTOMER_ADDRESS = V_UPDATE_CUSTOMER_ADDRESS||',ID_STATE=$4,DATE_MODIFIED=CURRENT_DATE WHERE ID_CUSTOMER=$5';
        
        IF P_FIRST_NAME IS NOT NULL AND V_FIRST_NAME <> P_FIRST_NAME THEN
            V_FIRST_NAME = P_FIRST_NAME;
        END IF;

        IF  V_SECOND_NAME <> P_SECOND_NAME THEN
            V_SECOND_NAME = P_SECOND_NAME;
        END IF;

        IF P_LAST_NAME IS NOT NULL AND V_LAST_NAME <> P_LAST_NAME THEN
            V_LAST_NAME = P_LAST_NAME;
        END IF;

        IF P_SECOND_LAST_NAME IS NOT NULL AND V_SECOND_LAST_NAME <> P_SECOND_LAST_NAME THEN
            V_SECOND_LAST_NAME = P_SECOND_LAST_NAME;
        END IF;

        IF P_RFC IS NOT NULL AND V_RFC <> P_RFC THEN
            V_RFC = P_RFC;
        END IF;

        IF P_AGE IS NOT NULL AND V_AGE <> P_AGE THEN
            V_AGE = P_AGE;
        END IF;

        IF P_CELL_PHONE IS NOT NULL AND V_CELL_PHONE <> P_CELL_PHONE THEN
            V_CELL_PHONE = P_CELL_PHONE;
        END IF;

        IF V_HOME_PHONE <> P_HOME_PHONE THEN
            V_HOME_PHONE = P_HOME_PHONE;
        END IF;

        IF P_EMAIL IS NOT NULL AND V_EMAIL <> P_EMAIL THEN
            V_EMAIL = P_EMAIL;
        END IF;

        IF P_ACTIVE IS NOT NULL AND V_ACTIVE <> P_ACTIVE THEN
            V_ACTIVE = P_ACTIVE;
        END IF;

        IF P_STREET IS NOT NULL AND V_STREET <> P_STREET THEN
            V_STREET = P_STREET;
        END IF;

        IF P_STREET_NUMBER IS NOT NULL AND V_STREET_NUMBER <> P_STREET_NUMBER THEN
            V_STREET_NUMBER = P_STREET_NUMBER;
        END IF;

        IF P_NEIGHBOURHOOD IS NOT NULL AND V_NEIGHBOURHOOD <> P_NEIGHBOURHOOD THEN
            V_NEIGHBOURHOOD = P_NEIGHBOURHOOD;
        END IF;

        IF P_ID_STATE IS NOT NULL AND V_ID_STATE <> P_ID_STATE THEN
            V_ID_STATE = P_ID_STATE;
        END IF;

        EXECUTE V_UPDATE_CUSTOMER USING V_FIRST_NAME,V_SECOND_NAME,V_LAST_NAME,V_SECOND_LAST_NAME,V_RFC,V_AGE,
                V_CELL_PHONE,V_HOME_PHONE,V_EMAIL,V_ACTIVE,ID_CUSTOMER;
        EXECUTE V_UPDATE_CUSTOMER_ADDRESS USING V_STREET,V_STREET_NUMBER,V_NEIGHBOURHOOD,V_ID_STATE,ID_CUSTOMER;
        COMMIT;

    ELSIF OPERATION = 2 THEN

        UPDATE CUSTOMER SET ACTIVE='0' WHERE ID=ID_CUSTOMER;
        COMMIT;
        
    ELSIF OPERATION = 3 THEN
        
        DELETE FROM CUSTOMER_ADDRESS CA WHERE CA.ID_CUSTOMER=ID_CUSTOMER;
        DELETE FROM CUSTOMER WHERE ID = ID_CUSTOMER;
        COMMIT;

    ELSE
        RAISE EXCEPTION 'THE VALUE OF OPERATION IS NOT VALID: %',OPERATION;
    END IF;

END; $$
